#!/usr/bin/env node

const exec = require('meta-exec');
const fs = require('fs');
const tildify = require('tildify');
const gitClone = require('../lib/gitClone');
const path = require('path');
const { green, cyan, yellow, red } = require('chalk');
const getMetaFile = require('get-meta-file');
const mkdirp = require('mkdirp');
const getCurrentRepoRemote = require('../lib/getCurrentRepoRemote');
const removeRemote = require('../lib/removeRemote');
const addRemote = require('../lib/addRemote');
const splitSubtree = require('../lib/splitSubtree');
const gitPush = require('../lib/gitPush');
const removeDirectory = require('../lib/removeDirectory');

const usage = () => {
  console.log(`
Usage: meta-project-migrate <destFolder> <childRepoUrl>
  
'meta project migrate' helps you move from a monorepo to a meta repo by moving directories from 
your existing repo into separate child repos, with git history intact. These are then referenced in 
your '.meta' file and cloned, making the operation transparent to your codebase.

${yellow('How it works')}
${yellow('------------')}

A) Migrate will first create a copy of your project in a temporary directory and replace the remote
'origin' with the provided <childRepoUrl>

B) It will split the history from <destFolder> and push to the provided <childRepo>:
https://help.github.com/en/articles/splitting-a-subfolder-out-into-a-new-repository

C) Next <destFolder> is removed from your monorepo, and then cloned back into the same location.

In the eyes of the monorepo, the only thing that has changed is the .meta file, however, <destFolder>
now also has it's own distinct history.

${yellow('Migration Phase')}
${yellow('---------------')}

If you need the monorepos structure to stay in tact for any extended duration, such as supporting legacy CI
systems, you can stop here. 

While in this 'migration' phase, you need to commit to the child directory's git history as well as the 
monorepo's git history. These commits can literally be made twice by cd-ing around or both can be made 
at once using 'meta git commit'.

When the monorepo no longer needs to be maintained you can simply add it to your '.gitignore'
`);
  process.exit(1);
};

const run = ({ process }) => {
  const { argv } = process;
  /^(-h||--help)$/.test(argv[2]) && usage();
  
  // Load the ".meta" module.
  const meta = getMetaFile();
  if (!meta) process.exit(1);

  const destArg = argv[2] === 'blank' ? argv[3] : argv[2];
  const repoUrl = argv[3] === 'blank' ? argv[4] : argv[3];
  const branch = (argv[4] === 'blank' ? null : argv[4]) || meta.defaultBranch || "master";
  (destArg && repoUrl) || usage();

  const metaPath = getMetaFile.getFileLocation();
  const dest = path.relative(path.dirname(metaPath), path.resolve(destArg));

  if (dest[0] === '.') {
    console.error(`ðŸ’¥ Projects cannot be outside the meta repo: ${cyan(dest)}`); // prettier-ignore
    process.exit(1);
  }

  const destExists = fs.existsSync(dest);
  if (destExists && !fs.statSync(dest).isDirectory()) {
    console.log(`ðŸ’¥ '${dest}' exists and is not a directory`);
    process.exit(1);
  }

  const gitExists = destExists && fs.existsSync(path.join(dest, '.git'));
  if (meta.projects[dest] === repoUrl && gitExists) {
    console.log(`${green('âœ“')} A git repository already exists at this location. We won't make any changes.`);
    process.exit(0);
  }

  const rootRepo = getCurrentRepoRemote();
  if (!rootRepo) {
    console.log(`ðŸ’¥ no root repo found`);
    process.exit(1);
  }
  console.log(`Root remote found: ${cyan(tildify(rootRepo))}`);

  const monorepoDir = process.cwd();
  const tempDir = fs.mkdtempSync("meta-project-migrate-");
  console.log(tempDir);

  function afterGitClone(err) {
    if (err) throw err;

    console.log(`Splitting subdirectory "${dest}" history into temporary folder "${tempDir}"`);
    splitSubtree({
      subdirectory: dest,
      source: monorepoDir,
      target: tempDir,
      branch: branch,
    });

    process.chdir(tempDir);

    console.log(`Now working in ${tempDir}`);
    
    console.log(`Removing original remote "origin"`);

    removeRemote({
      remoteName: 'origin',
    });
    
    console.log(`Setting remote origin to ${repoUrl}`);

    addRemote({
      remoteName: 'origin',
      gitUrl: repoUrl,
    });

    console.log(`Pushing split history to new remote origin ${repoUrl} on branch ${branch}`);

    gitPush({
      remote: 'origin',
      branch: branch,
    });

    process.chdir(monorepoDir);

    console.log(`History for ${dest} has been extracted and pushed to ${repoUrl}. Back to working in ${monorepoDir}.`);

    removeDirectory(tempDir);

    // now we need to remove the existing subfolder and replace it with same content from repoUrl via clone
    removeDirectory(dest);

    function afterImport(err) {
      if (err) throw err;

      console.log(`Updating "projects" in ${cyan(tildify(metaPath))}`); // prettier-ignore
      if (!meta.projects) meta.projects = {};
      meta.projects[dest] = repoUrl;
      getMetaFile.save(meta);

      console.log(`\n${green('âœ“')} Migrated repo from ${cyan(dest)} to ${cyan(repoUrl)}`); // prettier-ignore
    }

    gitClone({
      cb: afterImport,
      repoUrl,
      dest,
      gitExists,
      branch,
    });
  }

  console.log(`cloning into temp directory: ${cyan(tildify(tempDir))}`);

  gitClone({
    cb: afterGitClone,
    repoUrl: rootRepo,
    dest: tempDir,
    gitExists,
    branch,
  });
};

run({
  process,
});
